name: CI
on: [push, pull_request]

env:
  POETRY_HOME: /home/runner/.local
  POETRY_CACHE_DIR: /home/runner/.local/.cache

jobs:
  prepare:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        sqlalchemy-version: ["<2.0", "default"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up cache
        id: cached-dependencies
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version }}-${{ matrix.sqlalchemy-version }}-${{ hashFiles('**/poetry.lock') }}-poetry-1.3.2
      - name: Install and set up Poetry
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: make install-poetry
      - name: Install packages
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: make install-packages opts="--no-root"
      - name: Downgrade SQLAlchemy
        if: ${{ matrix.sqlalchemy-version != 'default' }}
        run: poetry run pip install -U "sqlalchemy${{ matrix.sqlalchemy-version }}"

  lint:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        sqlalchemy-version: ["<2.0", "default"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    needs: prepare
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version }}-${{ matrix.sqlalchemy-version }}-${{ hashFiles('**/poetry.lock') }}-poetry-1.3.2
      - name: Lint
        run: make lint

  tests:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        sqlalchemy-version: ["<2.0", "default"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="POSTGRES_PASSWORD=eventsourcing pg_isready -U eventsourcing -d eventsourcing_sqlalchemy"
          --health-interval="10s"
          --health-timeout="5s"
          --health-retries="5"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version }}-${{matrix.sqlalchemy-version }}-${{ hashFiles('**/poetry.lock') }}-poetry-1.3.2

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -c 'CREATE DATABASE eventsourcing_sqlalchemy;' -U postgres -h localhost
          PGPASSWORD=postgres psql -c "CREATE USER eventsourcing WITH PASSWORD 'eventsourcing';" -U postgres -h localhost

      - name: Print SQLAlchemy version
        run: poetry run python -c "import sqlalchemy; print(f'Using sqlalchemy {sqlalchemy.__version__}')"

      - name: Run tests
        run: make test
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
